
7.8.1. Well-Known Text (WKT)
ST_BdPolyFromText — Construct a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.
ST_BdMPolyFromText — Construct a MultiPolygon given an arbitrary collection of closed linestrings as a MultiLineString text representation Well-Known text representation.
ST_GeogFromText — Return a specified geography value from Well-Known Text representation or extended (WKT).
ST_GeographyFromText — Return a specified geography value from Well-Known Text representation or extended (WKT).
ST_GeomCollFromText — Makes a collection Geometry from collection WKT with the given SRID. If SRID is not given, it defaults to 0.
ST_GeomFromEWKT — Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).
ST_GeomFromMARC21 — Takes MARC21/XML geographic data as input and returns a PostGIS geometry object.
ST_GeometryFromText — Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText
ST_GeomFromText — Return a specified ST_Geometry value from Well-Known Text representation (WKT).
ST_LineFromText — Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to 0.
ST_MLineFromText — Return a specified ST_MultiLineString value from WKT representation.
ST_MPointFromText — Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.
ST_MPolyFromText — Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.
ST_PointFromText — Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.
ST_PolygonFromText — Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.
ST_WKTToSQL — Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText
7.8.2. Well-Known Binary (WKB)
ST_GeogFromWKB — Creates a geography instance from a Well-Known Binary geometry representation (WKB) or extended Well Known Binary (EWKB).
ST_GeomFromEWKB — Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).
ST_GeomFromWKB — Creates a geometry instance from a Well-Known Binary geometry representation (WKB) and optional SRID.
ST_LineFromWKB — Makes a LINESTRING from WKB with the given SRID
ST_LinestringFromWKB — Makes a geometry from WKB with the given SRID.
ST_PointFromWKB — Makes a geometry from WKB with the given SRID
ST_WKBToSQL — Return a specified ST_Geometry value from Well-Known Binary representation (WKB). This is an alias name for ST_GeomFromWKB that takes no srid
7.8.3. Other Formats
ST_Box2dFromGeoHash — Return a BOX2D from a GeoHash string.
ST_GeomFromGeoHash — Return a geometry from a GeoHash string.
ST_GeomFromGML — Takes as input GML representation of geometry and outputs a PostGIS geometry object
ST_GeomFromGeoJSON — Takes as input a geojson representation of a geometry and outputs a PostGIS geometry object
ST_GeomFromKML — Takes as input KML representation of geometry and outputs a PostGIS geometry object
ST_GeomFromTWKB — Creates a geometry instance from a TWKB ("Tiny Well-Known Binary") geometry representation.
ST_GMLToSQL — Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML
ST_LineFromEncodedPolyline — Creates a LineString from an Encoded Polyline.
ST_PointFromGeoHash — Return a point from a GeoHash string.
ST_FromFlatGeobufToTable — Creates a table based on the structure of FlatGeobuf data.
ST_FromFlatGeobuf — Reads FlatGeobuf data.
7.9. Geometry Output
Abstract
These functions convert geometry objects into various textual or binary formats.

7.9.1. Well-Known Text (WKT)
7.9.2. Well-Known Binary (WKB)
7.9.3. Other Formats
7.9.1. Well-Known Text (WKT)
ST_AsEWKT — Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.
ST_AsText — Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.
7.9.2. Well-Known Binary (WKB)
ST_AsBinary — Return the OGC/ISO Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.
ST_AsEWKB — Return the Extended Well-Known Binary (EWKB) representation of the geometry with SRID meta data.
ST_AsHEXEWKB — Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.
7.9.3. Other Formats
ST_AsEncodedPolyline — Returns an Encoded Polyline from a LineString geometry.
ST_AsFlatGeobuf — Return a FlatGeobuf representation of a set of rows.
ST_AsGeobuf — Return a Geobuf representation of a set of rows.
ST_AsGeoJSON — Return a geometry as a GeoJSON element.
ST_AsGML — Return the geometry as a GML version 2 or 3 element.
ST_AsKML — Return the geometry as a KML element.
ST_AsLatLonText — Return the Degrees, Minutes, Seconds representation of the given point.
ST_AsMARC21 — Returns geometry as a MARC21/XML record with a geographic datafield (034).
ST_AsMVTGeom — Transforms a geometry into the coordinate space of a MVT tile.
ST_AsMVT — Aggregate function returning a MVT representation of a set of rows.
ST_AsSVG — Returns SVG path data for a geometry.
ST_AsTWKB — Returns the geometry as TWKB, aka "Tiny Well-Known Binary"
ST_AsX3D — Returns a Geometry in X3D xml node element format: ISO-IEC-19776-1.2-X3DEncodings-XML
ST_GeoHash — Return a GeoHash representation of the geometry.
7.10. Operators
7.10.1. Bounding Box Operators
7.10.2. Distance Operators
7.10.1. Bounding Box Operators
&& — Returns TRUE if A's 2D bounding box intersects B's 2D bounding box.
&&(geometry,box2df) — Returns TRUE if a geometry's (cached) 2D bounding box intersects a 2D float precision bounding box (BOX2DF).
&&(box2df,geometry) — Returns TRUE if a 2D float precision bounding box (BOX2DF) intersects a geometry's (cached) 2D bounding box.
&&(box2df,box2df) — Returns TRUE if two 2D float precision bounding boxes (BOX2DF) intersect each other.
&&& — Returns TRUE if A's n-D bounding box intersects B's n-D bounding box.
&&&(geometry,gidx) — Returns TRUE if a geometry's (cached) n-D bounding box intersects a n-D float precision bounding box (GIDX).
&&&(gidx,geometry) — Returns TRUE if a n-D float precision bounding box (GIDX) intersects a geometry's (cached) n-D bounding box.
&&&(gidx,gidx) — Returns TRUE if two n-D float precision bounding boxes (GIDX) intersect each other.
&< — Returns TRUE if A's bounding box overlaps or is to the left of B's.
&<| — Returns TRUE if A's bounding box overlaps or is below B's.
&> — Returns TRUE if A' bounding box overlaps or is to the right of B's.
<< — Returns TRUE if A's bounding box is strictly to the left of B's.
<<| — Returns TRUE if A's bounding box is strictly below B's.
= — Returns TRUE if the coordinates and coordinate order geometry/geography A are the same as the coordinates and coordinate order of geometry/geography B.
>> — Returns TRUE if A's bounding box is strictly to the right of B's.
@ — Returns TRUE if A's bounding box is contained by B's.
@(geometry,box2df) — Returns TRUE if a geometry's 2D bounding box is contained into a 2D float precision bounding box (BOX2DF).
@(box2df,geometry) — Returns TRUE if a 2D float precision bounding box (BOX2DF) is contained into a geometry's 2D bounding box.
@(box2df,box2df) — Returns TRUE if a 2D float precision bounding box (BOX2DF) is contained into another 2D float precision bounding box.
|&> — Returns TRUE if A's bounding box overlaps or is above B's.
|>> — Returns TRUE if A's bounding box is strictly above B's.
~ — Returns TRUE if A's bounding box contains B's.
~(geometry,box2df) — Returns TRUE if a geometry's 2D bonding box contains a 2D float precision bounding box (GIDX).
~(box2df,geometry) — Returns TRUE if a 2D float precision bounding box (BOX2DF) contains a geometry's 2D bonding box.
~(box2df,box2df) — Returns TRUE if a 2D float precision bounding box (BOX2DF) contains another 2D float precision bounding box (BOX2DF).
~= — Returns TRUE if A's bounding box is the same as B's.
7.10.2. Distance Operators
<-> — Returns the 2D distance between A and B.
|=| — Returns the distance between A and B trajectories at their closest point of approach.
<#> — Returns the 2D distance between A and B bounding boxes.
<<->> — Returns the n-D distance between the centroids of A and B bounding boxes.
<<#>> — Returns the n-D distance between A and B bounding boxes.
7.11. Spatial Relationships
Abstract
These functions determine spatial relationships between geometries.

7.11.1. Topological Relationships
7.11.2. Distance Relationships
7.11.1. Topological Relationships
ST_3DIntersects — Tests if two geometries spatially intersect in 3D - only for points, linestrings, polygons, polyhedral surface (area)
ST_Contains — Tests if every point of B lies in A, and their interiors have a point in common
ST_ContainsProperly — Tests if every point of B lies in the interior of A
ST_CoveredBy — Tests if every point of A lies in B
ST_Covers — Tests if every point of B lies in A
ST_Crosses — Tests if two geometries have some, but not all, interior points in common
ST_Disjoint — Tests if two geometries have no points in common
ST_Equals — Tests if two geometries include the same set of points
ST_Intersects — Tests if two geometries intersect (they have at least one point in common)
ST_LineCrossingDirection — Returns a number indicating the crossing behavior of two LineStrings
ST_OrderingEquals — Tests if two geometries represent the same geometry and have points in the same directional order
ST_Overlaps — Tests if two geometries have the same dimension and intersect, but each has at least one point not in the other
ST_Relate — Tests if two geometries have a topological relationship matching an Intersection Matrix pattern, or computes their Intersection Matrix
ST_RelateMatch — Tests if a DE-9IM Intersection Matrix matches an Intersection Matrix pattern
ST_Touches — Tests if two geometries have at least one point in common, but their interiors do not intersect
ST_Within — Tests if every point of A lies in B, and their interiors have a point in common
7.11.2. Distance Relationships
ST_3DDWithin — Tests if two 3D geometries are within a given 3D distance
ST_3DDFullyWithin — Tests if two 3D geometries are entirely within a given 3D distance
ST_DFullyWithin — Tests if two geometries are entirely within a given distance
ST_DWithin — Tests if two geometries are within a given distance
ST_PointInsideCircle — Tests if a point geometry is inside a circle defined by a center and radius
7.12. Measurement Functions
Abstract
These functions compute measurements of distance, area and angles. There are also functions to compute geometry values determined by measurements.

ST_Area — Returns the area of a polygonal geometry.
ST_Azimuth — Returns the north-based azimuth of a line between two points.
ST_Angle — Returns the angle between two vectors defined by 3 or 4 points, or 2 lines.
ST_ClosestPoint — Returns the 2D point on g1 that is closest to g2. This is the first point of the shortest line from one geometry to the other.
ST_3DClosestPoint — Returns the 3D point on g1 that is closest to g2. This is the first point of the 3D shortest line.
ST_Distance — Returns the distance between two geometry or geography values.
ST_3DDistance — Returns the 3D cartesian minimum distance (based on spatial ref) between two geometries in projected units.
ST_DistanceSphere — Returns minimum distance in meters between two lon/lat geometries using a spherical earth model.
ST_DistanceSpheroid — Returns the minimum distance between two lon/lat geometries using a spheroidal earth model.
ST_FrechetDistance — Returns the Fréchet distance between two geometries.
ST_HausdorffDistance — Returns the Hausdorff distance between two geometries.
ST_Length — Returns the 2D length of a linear geometry.
ST_Length2D — Returns the 2D length of a linear geometry. Alias for ST_Length
ST_3DLength — Returns the 3D length of a linear geometry.
ST_LengthSpheroid — Returns the 2D or 3D length/perimeter of a lon/lat geometry on a spheroid.
ST_LongestLine — Returns the 2D longest line between two geometries.
ST_3DLongestLine — Returns the 3D longest line between two geometries
ST_MaxDistance — Returns the 2D largest distance between two geometries in projected units.
ST_3DMaxDistance — Returns the 3D cartesian maximum distance (based on spatial ref) between two geometries in projected units.
ST_MinimumClearance — Returns the minimum clearance of a geometry, a measure of a geometry's robustness.
ST_MinimumClearanceLine — Returns the two-point LineString spanning a geometry's minimum clearance.
ST_Perimeter — Returns the length of the boundary of a polygonal geometry or geography.
ST_Perimeter2D — Returns the 2D perimeter of a polygonal geometry. Alias for ST_Perimeter.
ST_3DPerimeter — Returns the 3D perimeter of a polygonal geometry.
ST_ShortestLine — Returns the 2D shortest line between two geometries
ST_3DShortestLine — Returns the 3D shortest line between two geometries
7.13. Overlay Functions
Abstract
These functions compute results arising from the overlay of two geometries. These are also known as point-set theoretic boolean operations. Some related functions are also provided.

ST_ClipByBox2D — Computes the portion of a geometry falling within a rectangle.
ST_Difference — Computes a geometry representing the part of geometry A that does not intersect geometry B.
ST_Intersection — Computes a geometry representing the shared portion of geometries A and B.
ST_MemUnion — Aggregate function which unions geometries in a memory-efficent but slower way
ST_Node — Nodes a collection of lines.
ST_Split — Returns a collection of geometries created by splitting a geometry by another geometry.
ST_Subdivide — Computes a rectilinear subdivision of a geometry.
ST_SymDifference — Computes a geometry representing the portions of geometries A and B that do not intersect.
ST_UnaryUnion — Computes the union of the components of a single geometry.
ST_Union — Computes a geometry representing the point-set union of the input geometries.
7.14. Geometry Processing
Abstract
These functions compute geometric constructions, or alter geometry size or shape.

ST_Buffer — Computes a geometry covering all points within a given distance from a geometry.
ST_BuildArea — Creates a polygonal geometry formed by the linework of a geometry.
ST_Centroid — Returns the geometric center of a geometry.
ST_ChaikinSmoothing — Returns a smoothed version of a geometry, using the Chaikin algorithm
ST_ConcaveHull — Computes a possibly concave geometry that contains all input geometry vertices
ST_ConvexHull — Computes the convex hull of a geometry.
ST_DelaunayTriangles — Returns the Delaunay triangulation of the vertices of a geometry.
ST_FilterByM — Removes vertices based on their M value
ST_GeneratePoints — Generates random points contained in a Polygon or MultiPolygon.
ST_GeometricMedian — Returns the geometric median of a MultiPoint.
ST_LineMerge — Return the lines formed by sewing together a MultiLineString.
ST_MaximumInscribedCircle — Computes the largest circle contained within a geometry.
ST_LargestEmptyCircle — Computes the largest circle not overlapping a geometry.
ST_MinimumBoundingCircle — Returns the smallest circle polygon that contains a geometry.
ST_MinimumBoundingRadius — Returns the center point and radius of the smallest circle that contains a geometry.
ST_OrientedEnvelope — Returns a minimum-area rectangle containing a geometry.
ST_OffsetCurve — Returns an offset line at a given distance and side from an input line.
ST_PointOnSurface — Computes a point guaranteed to lie in a polygon, or on a geometry.
ST_Polygonize — Computes a collection of polygons formed from the linework of a set of geometries.
ST_ReducePrecision — Returns a valid geometry with points rounded to a grid tolerance.
ST_SharedPaths — Returns a collection containing paths shared by the two input linestrings/multilinestrings.
ST_Simplify — Returns a simplified version of a geometry, using the Douglas-Peucker algorithm.
ST_SimplifyPreserveTopology — Returns a simplified and valid version of a geometry, using the Douglas-Peucker algorithm.
ST_SimplifyPolygonHull — Computes a simplifed topology-preserving outer or inner hull of a polygonal geometry.
ST_SimplifyVW — Returns a simplified version of a geometry, using the Visvalingam-Whyatt algorithm
ST_SetEffectiveArea — Sets the effective area for each vertex, using the Visvalingam-Whyatt algorithm.
ST_TriangulatePolygon — Computes the constrained Delaunay triangulation of polygons
ST_VoronoiLines — Returns the boundaries of the Voronoi diagram of the vertices of a geometry.
ST_VoronoiPolygons — Returns the cells of the Voronoi diagram of the vertices of a geometry.
7.15. Coverages
Abstract
These functions operate on sets of polygonal geometry that form "implicit coverages". To form a valid coverage polygons must not overlap, and the vertices of adjacent edges must match exactly. Coverages are fast to process, and can be operated on with window functions, which retain the coverage topology inside the window partition while altering the edges.

ST_CoverageInvalidEdges — Window function that finds locations where polygons fail to form a valid coverage.
ST_CoverageSimplify — Window function that simplifies the edges of a polygonal coverage.
ST_CoverageUnion — Computes the union of a set of polygons forming a coverage by removing shared edges.
7.16. Affine Transformations
Abstract
These functions change the position and shape of geometries using affine transformations.

ST_Affine — Apply a 3D affine transformation to a geometry.
ST_Rotate — Rotates a geometry about an origin point.
ST_RotateX — Rotates a geometry about the X axis.
ST_RotateY — Rotates a geometry about the Y axis.
ST_RotateZ — Rotates a geometry about the Z axis.
ST_Scale — Scales a geometry by given factors.
ST_Translate — Translates a geometry by given offsets.
ST_TransScale — Translates and scales a geometry by given offsets and factors.
7.17. Clustering Functions
Abstract
These functions implement clustering algorithms for sets of geometries.

ST_ClusterDBSCAN — Window function that returns a cluster id for each input geometry using the DBSCAN algorithm.
ST_ClusterIntersecting — Aggregate function that clusters input geometries into connected sets.
ST_ClusterIntersectingWin — Window function that returns a cluster id for each input geometry, clustering input geometries into connected sets.
ST_ClusterKMeans — Window function that returns a cluster id for each input geometry using the K-means algorithm.
ST_ClusterWithin — Aggregate function that clusters geometries by separation distance.
ST_ClusterWithinWin — Window function that returns a cluster id for each input geometry, clustering using separation distance.
7.18. Bounding Box Functions
Abstract
These functions produce or operate on bounding boxes. They can also provide and accept geometry values, by using automatic or explicit casts.

See also Section 12.7, “PostGIS Box Functions”.

Box2D — Returns a BOX2D representing the 2D extent of a geometry.
Box3D — Returns a BOX3D representing the 3D extent of a geometry.
ST_EstimatedExtent — Returns the estimated extent of a spatial table.
ST_Expand — Returns a bounding box expanded from another bounding box or a geometry.
ST_Extent — Aggregate function that returns the bounding box of geometries.
ST_3DExtent — Aggregate function that returns the 3D bounding box of geometries.
ST_MakeBox2D — Creates a BOX2D defined by two 2D point geometries.
ST_3DMakeBox — Creates a BOX3D defined by two 3D point geometries.
ST_XMax — Returns the X maxima of a 2D or 3D bounding box or a geometry.
ST_XMin — Returns the X minima of a 2D or 3D bounding box or a geometry.
ST_YMax — Returns the Y maxima of a 2D or 3D bounding box or a geometry.
ST_YMin — Returns the Y minima of a 2D or 3D bounding box or a geometry.
ST_ZMax — Returns the Z maxima of a 2D or 3D bounding box or a geometry.
ST_ZMin — Returns the Z minima of a 2D or 3D bounding box or a geometry.
7.19. Linear Referencing
ST_LineInterpolatePoint — Returns a point interpolated along a line at a fractional location.
ST_3DLineInterpolatePoint — Returns a point interpolated along a 3D line at a fractional location.
ST_LineInterpolatePoints — Returns points interpolated along a line at a fractional interval.
ST_LineLocatePoint — Returns the fractional location of the closest point on a line to a point.
ST_LineSubstring — Returns the part of a line between two fractional locations.
ST_LocateAlong — Returns the point(s) on a geometry that match a measure value.
ST_LocateBetween — Returns the portions of a geometry that match a measure range.
ST_LocateBetweenElevations — Returns the portions of a geometry that lie in an elevation (Z) range.
ST_InterpolatePoint — Returns the interpolated measure of a geometry closest to a point.
ST_AddMeasure — Interpolates measures along a linear geometry.
7.20. Trajectory Functions
Abstract
These functions support working with trajectories. A trajectory is a linear geometry with increasing measures (M value) on each coordinate. Spatio-temporal data can be modeled by using relative times (such as the epoch) as the measure values.

ST_IsValidTrajectory — Tests if the geometry is a valid trajectory.
ST_ClosestPointOfApproach — Returns a measure at the closest point of approach of two trajectories.
ST_DistanceCPA — Returns the distance between the closest point of approach of two trajectories.
ST_CPAWithin — Tests if the closest point of approach of two trajectories is within the specified distance.
7.21. SFCGAL Functions
Abstract
SFCGAL is a C++ wrapper library around CGAL that provides advanced 2D and 3D spatial functions. For robustness, geometry coordinates have an exact rational number representation.

Installation instructions for the library can be found on the SFCGAL home page (http://www.sfcgal.org). To enable the functions use create extension postgis_sfcgal.

postgis_sfcgal_version — Returns the version of SFCGAL in use
postgis_sfcgal_full_version — Returns the full version of SFCGAL in use including CGAL and Boost versions
ST_3DArea — Computes area of 3D surface geometries. Will return 0 for solids.
ST_3DConvexHull — Computes the 3D convex hull of a geometry.
ST_3DIntersection — Perform 3D intersection
ST_3DDifference — Perform 3D difference
ST_3DUnion — Perform 3D union.
ST_AlphaShape — Computes an Alpha-shape enclosing a geometry
ST_ApproximateMedialAxis — Compute the approximate medial axis of an areal geometry.
ST_ConstrainedDelaunayTriangles — Return a constrained Delaunay triangulation around the given input geometry.
ST_Extrude — Extrude a surface to a related volume
ST_ForceLHR — Force LHR orientation
ST_IsPlanar — Check if a surface is or not planar
ST_IsSolid — Test if the geometry is a solid. No validity check is performed.
ST_MakeSolid — Cast the geometry into a solid. No check is performed. To obtain a valid solid, the input geometry must be a closed Polyhedral Surface or a closed TIN.
ST_MinkowskiSum — Performs Minkowski sum
ST_OptimalAlphaShape — Computes an Alpha-shape enclosing a geometry using an "optimal" alpha value.
ST_Orientation — Determine surface orientation
ST_StraightSkeleton — Compute a straight skeleton from a geometry
ST_Tesselate — Perform surface Tesselation of a polygon or polyhedralsurface and returns as a TIN or collection of TINS
ST_Volume — Computes the volume of a 3D solid. If applied to surface (even closed) geometries will return 0.
7.22. Long Transaction Support
Abstract
These functions implement a row locking mechanism to support long transactions. They are provided primarily for implementors of the Web Feature Service specification.

AddAuth — Adds an authorization token to be used in the current transaction.
CheckAuth — Creates a trigger on a table to prevent/allow updates and deletes of rows based on authorization token.
DisableLongTransactions — Disables long transaction support.
EnableLongTransactions — Enables long transaction support.
LockRow — Sets lock/authorization for a row in a table.
UnlockRows — Removes all locks held by an authorization token.
[Note]	
For the locking mechanism to operate correctly the serializable transaction isolation level must be used.

7.23. Version Functions
Abstract
These functions report and upgrade PostGIS versions.

PostGIS_Extensions_Upgrade — Packages and upgrades PostGIS extensions (e.g. postgis_raster, postgis_topology, postgis_sfcgal) to given or latest version.
PostGIS_Full_Version — Reports full PostGIS version and build configuration infos.
PostGIS_GEOS_Version — Returns the version number of the GEOS library.
PostGIS_GEOS_Compiled_Version — Returns the version number of the GEOS library against which PostGIS was built.
PostGIS_Liblwgeom_Version — Returns the version number of the liblwgeom library. This should match the version of PostGIS.
PostGIS_LibXML_Version — Returns the version number of the libxml2 library.
PostGIS_Lib_Build_Date — Returns build date of the PostGIS library.
PostGIS_Lib_Version — Returns the version number of the PostGIS library.
PostGIS_PROJ_Version — Returns the version number of the PROJ4 library.
PostGIS_Wagyu_Version — Returns the version number of the internal Wagyu library.
PostGIS_Scripts_Build_Date — Returns build date of the PostGIS scripts.
PostGIS_Scripts_Installed — Returns version of the PostGIS scripts installed in this database.
PostGIS_Scripts_Released — Returns the version number of the postgis.sql script released with the installed PostGIS lib.
PostGIS_Version — Returns PostGIS version number and compile-time options.
7.24. Grand Unified Custom Variables (GUCs)
Abstract
This section lists custom PostGIS Grand Unified Custom Variables (GUC). These can be set globally, by database, by session or by transaction. Best set at global or database level.

postgis.backend — The backend to service a function where GEOS and SFCGAL overlap. Options: geos or sfcgal. Defaults to geos.
postgis.gdal_datapath — A configuration option to assign the value of GDAL's GDAL_DATA option. If not set, the environmentally set GDAL_DATA variable is used.
postgis.gdal_enabled_drivers — A configuration option to set the enabled GDAL drivers in the PostGIS environment. Affects the GDAL configuration variable GDAL_SKIP.
postgis.enable_outdb_rasters — A boolean configuration option to enable access to out-db raster bands.
postgis.gdal_vsi_options — A string configuration to set options used when working with an out-db raster.
7.25. Troubleshooting Functions
Abstract
These functions are utilities for troubleshooting and repairing geometry data. They are only needed if the geometry data is corrupted in some way, which should never happen under normal circumstances.

PostGIS_AddBBox — Add bounding box to the geometry.
PostGIS_DropBBox — Drop the bounding box cache from the geometry.
PostGIS_HasBBox — Returns TRUE if the bbox of this geometry is cached, FALSE otherwise.
Prev 	 	 Next
Chapter 6. Performance Tips 	Home	 box2d